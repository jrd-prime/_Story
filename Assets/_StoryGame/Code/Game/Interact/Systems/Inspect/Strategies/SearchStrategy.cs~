using _StoryGame.Core.Animations.Messages;
using _StoryGame.Core.Interact;
using _StoryGame.Core.Interact.Enums;
using _StoryGame.Core.Interact.Interactables;
using _StoryGame.Core.Providers.Localization;
using _StoryGame.Core.UI;
using _StoryGame.Core.UI.Msg;
using _StoryGame.Data.Animator;
using _StoryGame.Data.Loot;
using _StoryGame.Game.Managers.Game.Messages;
using _StoryGame.Game.UI.Impls.Viewer.Messages;
using _StoryGame.Infrastructure.Interact;
using Cysharp.Threading.Tasks;

namespace _StoryGame.Game.Interact.Systems.Inspect.Strategies
{
    public sealed class SearchStrategy : IInspectSystemStrategy
    {
        private const float SearchDuration = 2f;
        public string Name => nameof(SearchStrategy);

        private readonly InteractSystemDepFlyweight _dep;
        private IInspectable _inspectable;
        private string _objLocalizedName;
        private readonly DialogResultHandler _dialogResultHandler;
        private PreparedObjLootData _objLootData;

        public SearchStrategy(InteractSystemDepFlyweight dep)
        {
            _dep = dep;
            _dialogResultHandler = new DialogResultHandler(_dep.Log);
            _dialogResultHandler.AddCallback(EDialogResult.TakeAll, OnTakeAllAction);
            _dialogResultHandler.AddCallback(EDialogResult.Close, OnCloseAction);
        }

        public async UniTask<bool> ExecuteAsync(IInspectable inspectable)
        {
            _inspectable = inspectable;
            _objLocalizedName =
                _dep.L10n.Localize(_inspectable.LocalizationKey, ETable.Words,
                    ETextTransform.Upper);

            return await SearchLoot();
        }

        private async UniTask<bool> SearchLoot()
        {
            var source = new UniTaskCompletionSource<EDialogResult>();

            _dep.Publisher.ForPlayerAnimator(new SetBoolMsg(AnimatorConst.IsGatherHigh, true));

            _dep.Publisher.ForPlayerOverHeadUI(new DisplayProgressBarMsg("SearchLoot", SearchDuration, source));
            await source.Task;

            _dep.Publisher.ForPlayerAnimator(new SetBoolMsg(AnimatorConst.IsGatherHigh, false));

            _inspectable.SetInspectState(EInspectState.Searched);

            await UniTask.Yield();
            await ShowLootTipAfterSearch();

            return true;
        }

        private async UniTask<bool> ShowLootTipAfterSearch()
        {
            _dep.Publisher.ForUIViewer(new CurrentOperationMsg("ShowLootTipAfterSearch"));

            var source = new UniTaskCompletionSource<EDialogResult>();


            _objLootData = _dep.LootGenerator.GenerateLootData(_inspectable);
            var message = new ShowLootWindowMsg(_objLootData, source);

            try
            {
                _dep.Publisher.ForUIViewer(message);

                _dep.Log.Warn("pre await source.Task");
                var result = await source.Task;
                _dep.Log.Warn("post await source.Task");
                source = null;

                _dialogResultHandler.HandleResult(result);
            }
            finally
            {
                source?.TrySetCanceled();
            }

            return true;
        }

        private void OnCloseAction()
        {
        }

        private void OnTakeAllAction()
        {
            _dep.Publisher.ForUIViewer(new CurrentOperationMsg("ShowLootTipAfterSearch"));
            _inspectable.CanInteract = false; // TODO подумать, мб не вырубать, а показывать хинт
            _dep.Publisher.ForGameManager(new TakeRoomLootMsg(_objLootData));
        }
    }
}
