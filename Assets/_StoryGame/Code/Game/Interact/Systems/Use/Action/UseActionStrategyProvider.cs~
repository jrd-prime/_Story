using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using _StoryGame.Core.Interact;
using _StoryGame.Core.Providers.Localization;
using _StoryGame.Core.UI.Interfaces;
using _StoryGame.Data;
using _StoryGame.Game.Interact.Abstract;
using _StoryGame.Game.Interact.ObjTypes.Usable;
using _StoryGame.Game.Interact.Systems.Inspect.Strategies;
using _StoryGame.Game.Interact.Systems.Use;
using _StoryGame.Game.Managers.Game.Messages;
using _StoryGame.Infrastructure.Interact;
using Cysharp.Threading.Tasks;

namespace _StoryGame.Game.Interact.Systems
{
    public sealed class UseActionStrategyProvider
    {
        private readonly Dictionary<EUseAction, IUseActionStrategy> _strategies = new();

        public UseActionStrategyProvider(InteractSystemDepFlyweight systemDep)

        {
            _strategies.Add(EUseAction.RoomExit, new ExitFromRoomStrategy(systemDep));
            _strategies.Add(EUseAction.PickUp, new PickUpStrategy(systemDep));
            _strategies.Add(EUseAction.Switch, new SwitchStrategy(systemDep));
        }

        /// <summary>
        /// Gets the strategy implementation for the specified use state.
        /// </summary>
        public IUseActionStrategy GetStrategy(EUseAction action)
        {
            if (!_strategies.TryGetValue(action, out var strategy))
                throw new ArgumentException($"Unknown use action: {action}");

            return strategy;
        }
    }

    public class SwitchStrategy : IUseActionStrategy
    {
        public string StrategyName => nameof(SwitchStrategy);

        public SwitchStrategy(InteractSystemDepFlyweight systemDep)
        {
            throw new NotImplementedException();
        }

        public async UniTask<bool> ExecuteAsync(IUsable usable)
        {
            return await Switch();
        }

        private async UniTask<bool> Switch()
        {
            return true;
        }
    }

    public class PickUpStrategy : IUseActionStrategy
    {
        public string StrategyName => nameof(PickUpStrategy);

        public PickUpStrategy(InteractSystemDepFlyweight systemDep)
        {
            throw new NotImplementedException();
        }

        public async UniTask<bool> ExecuteAsync(IUsable usable)
        {
            return await PickUp();
        }

        private async UniTask<bool> PickUp()
        {
            return true;
        }
    }

    public class ExitFromRoomStrategy : IUseActionStrategy
    {
        private readonly InteractSystemDepFlyweight _dep;
        private IUsableExit _usableExit;
        private readonly DialogResultHandler _dialogResultHandler;
        public string StrategyName => nameof(ExitFromRoomStrategy);
        private const int Price = 2;
        
        public ExitFromRoomStrategy(InteractSystemDepFlyweight dep)
        {
            _dep = dep;
            _dialogResultHandler = new DialogResultHandler();

            _dialogResultHandler.AddCallback(EDialogResult.Apply, OnApplyAction);
            _dialogResultHandler.AddCallback(EDialogResult.Close, OnCloseAction);
        }

        private void OnCloseAction()
        {
        }

        private void OnApplyAction()
        {
            _dep.Publisher.ForGameManager(new SpendEnergyMsg(Price));
            _dep.Publisher.ForGameManager(new RoomChooseRequestMsg());
        }

        public async UniTask<bool> ExecuteAsync(IUsable usable)
        {
            _usableExit = usable as IUsableExit ?? throw new Exception("Interact is not IUsableExit");
            return await ExitFromRoom();
        }

        private async UniTask<bool> ExitFromRoom()
        {
            var source = new UniTaskCompletionSource<EDialogResult>();

            var localizedQuestion =
                _dep.LocalizationProvider.Localize(_usableExit.ExitQuestionLocalizationKey, ETable.SmallPhrase);

            IUIViewerMsg msg = new ShowExitRoomWindowMsg("LocalizedName", localizedQuestion, Price, source);
            try
            {
                _dep.Publisher.ForUIViewer(msg);
                var result = await source.Task;

                _dialogResultHandler.HandleResult(result);
            }
            finally
            {
                source?.TrySetCanceled();
            }

            return true;
        }
    }

    public interface IUsableExit : IUsable
    {
        string ExitQuestionLocalizationKey { get; }
    }
}
