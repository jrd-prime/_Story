using _StoryGame.Core.Interfaces.UI;
using _StoryGame.Game.UI.Impls.Viewer.Layers;
using _StoryGame.Game.UI.Messages;
using Cysharp.Threading.Tasks;
using MessagePipe;
using UnityEngine;
using Random = System.Random;

namespace _StoryGame.Game.Interactables.Inspect
{
    public enum DialogResult
    {
        Close,
        TakeAll,
        Search
    }

    public sealed class InspectSystem : IInteractableSystem
    {
        Random random = new Random();

        private Inspectable _inspectable;
        private readonly IPublisher<IUIViewerMessage> _uiViewerMsgPub;

        public InspectSystem(IPublisher<IUIViewerMessage> uiViewerMsgPub)
        {
            _uiViewerMsgPub = uiViewerMsgPub;
        }

        public async UniTask<bool> Process(Inspectable inspectable)
        {
            _inspectable = inspectable;

            var inspectState = inspectable.InspectState;

            var result = inspectState switch
            {
                EInspectState.NotInspected => await StartInspect(),
                EInspectState.Inspected => await Inspected(),
                EInspectState.Searched => await Searched(),
                _ => false
            };

            Debug.Log($"Interact result: {result}");

            await OnInteractionComplete();
            return result;
        }

        private async UniTask OnInteractionComplete()
        {
            Debug.Log("OnInteractionComplete");
            await UniTask.Yield();
        }

        private async UniTask<bool> StartInspect()
        {
            Debug.Log("Inspect");
            await OnStartInspect();
            await OnCompleteInspect();

            return true;
        }

        private async UniTask OnStartInspect()
        {
            Debug.Log("OnStart Inspect"); // anim hero // await progress bar
            await UniTask.Yield();
        }

        private async UniTask OnCompleteInspect()
        {
            Debug.Log("OnComplete Inspect");
            _inspectable.SetInspectState(EInspectState.Inspected);
            await ShowLootTipAfterInspect();
        }

        private async UniTask OnStartSearch()
        {
            Debug.Log("OnStart Search"); // anim hero // await progress bar
            await UniTask.Yield();
        }

        private async UniTask OnCompleteSearch()
        {
            Debug.Log("OnComplete Search");
            _inspectable.SetInspectState(EInspectState.Searched);
            await ShowLootTipAfterSearch();
        }

        bool takeAll = true;
        bool loot = false;
        bool search = true;

        private async UniTask ShowLootTipAfterInspect()
        {
            Debug.Log("After Inspect");


            Debug.LogWarning($"<color=green>Loot: {loot}, Search: {search}</color>");

            var source = new UniTaskCompletionSource<DialogResult>();

            if (loot)
            {
                Debug.Log("Inspect - has loot");

                var window =
                    new ShowFloatingWindowMsg<DialogResult>("", "HAS LOOT", FloatingWindowType.HasLoot, source);

                _uiViewerMsgPub.Publish(window);

                var result = await source.Task;

                if (result == DialogResult.Search)
                {
                    await OnStartSearch();
                }
                else if (result == DialogResult.Close)
                {
                    Debug.Log("ShowLootTipAfterInspect - CLOSE");
                }
            }
            else
            {
                Debug.Log("Inspect - no loot");

                var window = new ShowFloatingWindowMsg<DialogResult>("", "NO LOOT", FloatingWindowType.NoLoot, source);
                _uiViewerMsgPub.Publish(window);

                var result = await source.Task;

                if (result == DialogResult.Close)
                {
                    Debug.Log("ShowLootTipAfterInspect - CLOSE");
                }
            }
        }

        private async UniTask ShowLootTipAfterSearch()
        {
            Debug.Log("ShowLootTipAfterSearch - wait callback from tip . Take all: " + takeAll);

            if (takeAll)
            {
                Debug.Log("ShowLootTipAfterSearch - TAKE ALL");
            }
            else
            {
                Debug.Log("ShowLootTipAfterSearch - CLOSE");
            }

            await UniTask.Yield();
        }


        /// <summary>
        /// После осмотра показываем инфу по луту
        /// </summary>
        private async UniTask<bool> Inspected()
        {
            Debug.Log("Inspected");
            await OnCompleteInspect();
            return true;
        }

        /// <summary>
        /// После обыска показываем инфу итоговую
        /// </summary>
        private async UniTask<bool> Searched()
        {
            Debug.Log("Searched");
            await OnCompleteSearch();
            return true;
        }
    }
}
