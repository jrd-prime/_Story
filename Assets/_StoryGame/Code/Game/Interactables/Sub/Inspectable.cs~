using System.Threading.Tasks;
using _StoryGame.Core.Character.Common.Interfaces;
using _StoryGame.Core.Interactables.Interfaces;
using Cysharp.Threading.Tasks;
using DG.Tweening;
using UnityEngine;

namespace _StoryGame.Game.Interactables.Sub
{
    /// <summary>
    /// Например, стеллаж (что не требует открывания, как сейф)
    /// </summary>
    public class Inspectable : Interactable
    {
        public override EInteractableType InteractableType => EInteractableType.Inspect;
        private EInspectState _inspectState = EInspectState.NotInspected;

        public override async UniTask InteractAsync(ICharacter character)
        {
            var completionSource = new UniTaskCompletionSource();

            transform.DORotate(new Vector3(0, 360, 0), 2f, RotateMode.FastBeyond360)
                .SetRelative(true)
                .SetEase(Ease.Linear)
                .OnComplete(() => completionSource.TrySetResult());

            var result = _inspectState switch
            {
                EInspectState.NotInspected => await Inspect(),
                EInspectState.Inspected => await Inspected(),
                EInspectState.Searched => await Searched(),
                _ => false
            };

            Debug.Log($"Interact result: {result}");

            await completionSource.Task;
        }

        /// <summary>
        /// Осматриваем
        /// </summary>
        private async UniTask<bool> Inspect()
        {
            await OnStartInspect();

            await OnCompleteInspect();

            return true;
        }


        private async UniTask OnStartInspect()
        {
            Debug.Log("OnStartInspect");
            // anim hero
            // await progress bar
        }

        private async UniTask OnCompleteInspect()
        {
            Debug.Log("OnCompleteInspect");

            _inspectState = EInspectState.Inspected;
        }

        /// <summary>
        /// После осмотра показываем инфу по луту
        /// </summary>
        private async UniTask<bool> Inspected()
        {
            OnCompleteInspect();
            return true;
        }

        /// <summary>
        /// После обыска показываем инфу итоговую
        /// </summary>
        private async UniTask<bool> Searched()
        {
            return true;
        }

        private enum EInspectState
        {
            NotInspected, // не осмотрен
            Inspected, // осмотрен
            Searched // обыскан за энергию
        }
    }
}
