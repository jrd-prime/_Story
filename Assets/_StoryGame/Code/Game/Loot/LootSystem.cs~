using System.Collections.Generic;
using _StoryGame.Data.SO.Abstract;
using _StoryGame.Game.Interactables.Interfaces;
using _StoryGame.Infrastructure.Logging;

namespace _StoryGame.Game.Loot
{
    // в каждой комнате лут будет гененрироваться, при смене комнаты - сбрасываться
    public sealed class LootSystem : ILootSystem
    {
        private readonly IJLog _log;
        private readonly Dictionary<string, bool> _hasLootCache = new(); // <interactable id, hasLoot>

        private readonly Dictionary<string, GeneratedLootVo>
            _generatedLootCache = new(); // <interactable id, loot data>

        private readonly LootGenerator _lootGenerator;

        public LootSystem(IJLog log)
        {
            _log = log;
            _lootGenerator = new LootGenerator();
            // subscribe to change room evt - reset loot
        }

        public GeneratedLootVo GetGeneratedLoot(string id)
        {
            if (!_hasLootCache.TryGetValue(id, out var value))
                throw new KeyNotFoundException($"Loot for interactable {id} not GENERATED! Generate it first!");

            if (!value)
                _log.Warn($"Loot for interactable {id} is EMPTY");

            if (_generatedLootCache.TryGetValue(id, out var lootData))
                return lootData;

            throw new KeyNotFoundException($"Loot for interactable {id} not found!");
        }

        public void GenerateLootFor(IInspectable inspectable)
        {
            if (_hasLootCache.ContainsKey(inspectable.Id))
                return;

            GeneratedLootVo lootVo = _lootGenerator.GenerateLoot(inspectable.Room, inspectable.Chances);

            // generate
            // add loot and state
            if (lootVo.HasLoot)
            {
                _log.Warn(
                    $"Loot for interactable {inspectable.Id} GENERATED. And it is <color=green>NOT EMPTY</color>!");
                _hasLootCache.Add(lootVo.OwnerId, lootVo.HasLoot);
                _generatedLootCache.Add(lootVo.OwnerId, lootVo);
            }
            else
            {
                _log.Warn($"Loot for interactable {inspectable.Id} GENERATED. But it is <color=red>EMPTY</color>!");
                _hasLootCache.Add(lootVo.OwnerId, lootVo.HasLoot);
            }
        }

        public bool HasLoot(string id)
        {
            if (_hasLootCache.TryGetValue(id, out var hasLoot))
                return hasLoot;

            _log.Error($"Loot for interactable {id} not GENERATED");
            return false;
        }

        private void ResetLoot()
        {
            _log.Debug("Reset Loot On Room Change");
            _hasLootCache.Clear();
            _generatedLootCache.Clear();
        }
    }

    public record GeneratedLootVo(string OwnerId, bool HasLoot, List<ACurrencyData> Loot)
    {
        public string OwnerId { get; } = OwnerId;
        public bool HasLoot { get; } = HasLoot;
        public List<ACurrencyData> Loot { get; } = Loot;
    }
}
