using System;
using _StoryGame.Core.Providers.Settings;
using _StoryGame.Infrastructure.Settings;
using _StoryGame.Infrastructure.Tools;
using R3;
using UnityEngine;
using UnityEngine.UIElements;
using VContainer;

namespace _StoryGame.Game.UI.Impls.Views.Gameplay
{
    public class GameplayUIViewModel : IGameplayUIViewModel
    {
        public ReactiveProperty<Vector3> MoveDirection { get; } = new(Vector3.zero);
        public ReactiveProperty<bool> IsTouchPositionVisible { get; } = new(false);
        public ReactiveProperty<Vector2> RingPosition { get; } = new(Vector2.zero);
        public Observable<float> FPS => _fps;

        private readonly ReactiveProperty<float> _fps = new(0);
        private readonly CompositeDisposable _disposables = new();
        private bool _isTouchActive;
        private float _offsetForFullSpeed = 100f;
        private Vector3 _moveInput;
        private Vector3 _startTouchPosition;
        private ISettingsProvider _settingsManager;

        [Inject]
        private void Construct(ISettingsProvider settingsManager) => _settingsManager = settingsManager;
        
        public void Initialize()
        {
            if (_settingsManager != null)
            {
                // var movementControlSettings = _settingsManager.GetConfig<MovementControlSettings>();
                // _offsetForFullSpeed = movementControlSettings.offsetForFullSpeed;
                // return;
            }

            Debug.LogError("SettingsManager is null. Use default settings.");
        }

        public GameplayUIViewModel(FPSCounter fps)
        {
            if (fps == null)
                throw new NullReferenceException("FPSCounter is null.");

            fps.Fps.Subscribe(value => _fps.Value = value).AddTo(_disposables);
        }

        private void SetMoveDirection(Vector3 value)
        {
            Debug.Log($"MoveDirection: {value}");

            MoveDirection.Value = value;
        }


        public void OnDownEvent(PointerDownEvent evt)
        {
            Debug.Log("OnDownEvent");
            if (_isTouchActive) return;

            _isTouchActive = true;
            _startTouchPosition = evt.localPosition;

            ShowRingAtTouchPosition(_startTouchPosition);
        }

        public void OnMoveEvent(PointerMoveEvent evt)
        {
            if (!_isTouchActive) return;

            var currentPosition = evt.localPosition;
            var offset = currentPosition - _startTouchPosition;
            var distance = offset.magnitude;

            if (distance > _offsetForFullSpeed) offset = offset.normalized * _offsetForFullSpeed;

            _moveInput = offset / _offsetForFullSpeed;
            _moveInput = Vector2.ClampMagnitude(_moveInput, 1.0f);

            SetMoveDirection(new Vector3(_moveInput.x, 0, _moveInput.y * -1f));
        }

        public void OnUpEvent(PointerUpEvent _)
        {
            if (!_isTouchActive) return;
            ResetTouch();
        }

        public void OnOutEvent(PointerOutEvent _)
        {
            if (!_isTouchActive) return;
            ResetTouch();
        }

        private void ResetTouch()
        {
            _isTouchActive = false;
            _moveInput = Vector2.zero;

            SetMoveDirection(Vector3.zero);
            HideRing();
        }

        private void ShowRingAtTouchPosition(Vector3 position)
        {
            RingPosition.Value = new Vector2(position.x, position.y);

            ShowRing();
        }

        private void HideRing() => IsTouchPositionVisible.Value = false;
        private void ShowRing() => IsTouchPositionVisible.Value = true;
    }
}
