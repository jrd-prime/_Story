using System;
using _StoryGame.Core.Animations.Messages;
using _StoryGame.Core.Character.Common.Interfaces;
using _StoryGame.Core.Character.Player;
using _StoryGame.Core.Character.Player.Interfaces;
using _StoryGame.Core.Common.Interfaces;
using _StoryGame.Core.Messaging.Interfaces;
using _StoryGame.Core.WalletNew.Interfaces;
using _StoryGame.Data.Loot;
using _StoryGame.Data.SO.Abstract;
using _StoryGame.Game.Character.Player.Messages;
using _StoryGame.Game.Movement;
using Cysharp.Threading.Tasks;
using MessagePipe;
using R3;
using UnityEngine;
using UnityEngine.AI;
using VContainer.Unity;

namespace _StoryGame.Game.Character.Player.Impls
{
    public sealed class PlayerInteractor : IPlayer, IInitializable
    {
        public ReadOnlyReactiveProperty<Vector3> Position => _playerView.Position.ToReadOnlyReactiveProperty();
        public ReadOnlyReactiveProperty<ECharacterState> State => _state.ToReadOnlyReactiveProperty();
        public ReadOnlyReactiveProperty<Vector3> DestinationPoint => _destinationPoint.ToReadOnlyReactiveProperty();
        public ReadOnlyReactiveProperty<int> Energy => _energy.ToReadOnlyReactiveProperty();

        public string Id => _service.Id;
        public IWallet Wallet => _wallet;
        public string Name => _playerView.name;
        public string Description => _playerView.Description;
        public object Animator => _playerView.Animator;
        public int Health { get; set; }
        public int MaxHealth { get; set; }

        public ReadOnlyReactiveProperty<int> MaxEnergy => _maxEnergy.ToReadOnlyReactiveProperty();
        public NavMeshAgent NavMeshAgent => _playerView.NavMeshAgent;

        private readonly ReactiveProperty<int> _energy = new(0);
        private readonly ReactiveProperty<ECharacterState> _state = new(ECharacterState.Idle);
        private readonly ReactiveProperty<Vector3> _destinationPoint = new();
        private readonly ReactiveProperty<int> _maxEnergy = new(0);

        private readonly PlayerService _service;
        private readonly IWallet _wallet;
        private readonly PlayerView _playerView;
        private readonly IPublisher<IPlayerMsg> _selfMsgPub;
        private readonly IJLog _log;
        private readonly PlayerMessageHandler _messageHandler;

        public PlayerInteractor(
            PlayerService service,
            PlayerView playerView,
            IJLog log,
            IWalletService walletService,
            IPublisher<IPlayerMsg> selfMsgPub,
            ISubscriber<IPlayerAnimatorMsg> playerAnimatorMsgSub)
        {
            _playerView = playerView;
            _service = service;
            _log = log;
            _wallet = walletService.GetOrCreate(Id);
            _selfMsgPub = selfMsgPub;

            _messageHandler = new PlayerMessageHandler(this, playerAnimatorMsgSub);
        }

        public void Initialize()
        {
            SetState(ECharacterState.Idle);
            _maxEnergy.Value = _service.MaxEnergy;
        }

        public void SetState(ECharacterState state)
        {
            _state.Value = state;
            PublishState(state);
        }

        private void PublishState(ECharacterState state) =>
            _selfMsgPub.Publish(new PlayerStateMsg(state));

        public async UniTask MoveToPointAsync(Vector3 position, EDestinationPoint destinationPointType)
        {
            _destinationPoint.Value = position;

            switch (destinationPointType)
            {
                case EDestinationPoint.Ground:
                    SetState(ECharacterState.MovingToPoint);
                    break;
                case EDestinationPoint.Entrance:
                    SetState(ECharacterState.MovingToInteractable);
                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(destinationPointType), destinationPointType, null);
            }

            await _playerView.MoveToAsync(position);

            SetState(ECharacterState.Idle);
        }

        public void OnStartInteract()
        {
            _log.Debug("On Start Interact");

            SetState(ECharacterState.Interacting);
        }

        public void OnEndInteract()
        {
            _log.Debug("On End Interact");
            SetState(ECharacterState.Idle);
        }

        public bool HasEnoughEnergy(int energy)
        {
            _selfMsgPub.Publish(new NotEnoughEnergyMsg());
            return _energy.Value >= energy;
        }

        /// <summary>
        /// Set directly energy 0+
        /// </summary>
        public void SetEnergy(int energy)
        {
            if (IsEnergyArgNegative(energy, "set"))
                return;

            _energy.Value = energy;
        }

        /// <summary>
        /// Add energy 0+
        /// </summary>
        /// <param name="energy"></param>
        public void AddEnergy(int energy)
        {
            if (IsEnergyArgNegative(energy, "add"))
                return;

            _energy.Value += energy;
        }

        /// <summary>
        /// Spend energy 0+
        /// </summary>
        /// <param name="energy"></param>
        public void SpendEnergy(int energy)
        {
            if (IsEnergyArgNegative(energy, "spend"))
                return;

            if (HasEnoughEnergy(energy))
                _energy.Value -= energy;

            if (_energy.CurrentValue == 0)
                _selfMsgPub.Publish(new OutOfEnergyMsg());
        }

        public void AddNote(InspectableLootData lootData)
        {
            _wallet.Add(lootData.Currency.Id, lootData.Currency.Amount);
        }

        public void AddItemToWallet(ACurrencyData itemData, int amount)
        {
            _wallet.Add(itemData.Id, amount);
        }

        /// <summary>
        /// Check if energy is negative
        /// </summary>
        private bool IsEnergyArgNegative(int energy, string operation)
        {
            if (energy >= 0)
                return false;

            _log.Warn($"Try to {operation} negative energy!");
            return true;
        }
    }

    public record NotEnoughEnergyMsg : IPlayerMsg;

    public record OutOfEnergyMsg : IPlayerMsg;
}
