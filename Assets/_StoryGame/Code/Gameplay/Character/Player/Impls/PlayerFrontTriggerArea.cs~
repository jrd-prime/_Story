using System;
using System.Collections.Generic;
using System.Linq;
using _StoryGame.Core.Character.Common.Interfaces;
using _StoryGame.Core.Character.Player.Interfaces;
using _StoryGame.Core.Interactables.Interfaces;
using _StoryGame.Infrastructure.Localization;
using _StoryGame.Infrastructure.Logging;
using UnityEngine;
using VContainer;

namespace _StoryGame.Gameplay.Character.Player.Impls
{
    [RequireComponent(typeof(Collider))]
    public sealed class PlayerFrontTriggerArea : MonoBehaviour
    {
        [SerializeField] private LayerMask triggeredByLayer;

        [Inject] private IObjectResolver _container;

        private ICharacter _colliderOwner;
        private bool _isInitialized;
        private IInteractable _currentInteractable;

        private readonly HashSet<IInteractable> _interactablesInTrigger = new();

        // private SignalBus _signalBus;
        private ILocalizationProvider _localizationProvider;
        private IJLog _log;

        public void Init(IPlayer player)
        {
            if (_container == null)
                throw new NullReferenceException($"DiContainer is null. {nameof(PlayerFrontTriggerArea)}");

            _log = _container.Resolve<IJLog>();

            _colliderOwner = player ??
                             throw new NullReferenceException($"Player is null. {nameof(PlayerFrontTriggerArea)}");

            // _signalBus = _container.Resolve<SignalBus>(nameof(PlayerFrontTriggerArea));
            _localizationProvider = _container.Resolve<ILocalizationProvider>();

            _isInitialized = true;
        }

        private void OnTriggerEnter(Collider other)
        {
            if (!_isInitialized)
            {
                _log.Error("PlayerFrontTriggerArea not initialized. Use Init().");
                return;
            }

            if (!other || !IsLayerInMask(other.gameObject.layer))
                return;
            _log.Debug("OnTriggerEnter");

            var interactable = other.gameObject.GetComponent<IInteractable>();
            if (interactable == null)
            {
                _log.Warn($"Interactable {other.gameObject.name} has no interactable component.");
                return;
            }

            if (!_interactablesInTrigger.Add(interactable))
            {
                _log.Warn($"Interactable {other.gameObject.name} already in trigger zone.");
                return;
            }

            if (_interactablesInTrigger.Count > 1)
            {
                var names = string
                    .Join(", ", _interactablesInTrigger.Select(i => ((Component)i)?.gameObject.name ?? "Unknown"));
                _currentInteractable = _interactablesInTrigger.FirstOrDefault();
            }
            else _currentInteractable = interactable;


            if (_currentInteractable == null)
                return;

            try
            {
                var position = other.transform?.position ?? Vector3.zero;
                var promptPosition = new Vector3(position.x, 3f, position.z);
                var tip = GetInteractionTip(_currentInteractable);
                // _signalBus.Fire(new ShowInteractTipSignal(tip, promptPosition));
            }
            catch (Exception ex)
            {
                _log.Error($"Failed to process trigger enter for {other.gameObject.name}: {ex.Message}");
            }
        }

        private void OnTriggerExit(Collider other)
        {
            if (!_isInitialized || !other || !IsLayerInMask(other.gameObject.layer))
                return;

            var interactable = other.gameObject.GetComponent<IInteractable>();

            if (interactable == null)
                return;

            if (_interactablesInTrigger.Remove(interactable) && interactable == _currentInteractable)
            {
                _currentInteractable = _interactablesInTrigger.FirstOrDefault();
                if (_currentInteractable == null)
                {
                    // _signalBus.Fire(new HideInteractTipSignal());
                }
            }
        }

        // private async void OnInteractKeySignal(InteractKeySignal signal)
        // {
        //     if (!_isInitialized || _colliderOwner.State == CharacterState.Interacting || _currentInteractable == null)
        //     {
        //         Debug.LogWarning("Not initialized or already interacting. " + name);
        //         return;
        //     }
        //
        //     _colliderOwner.SetState(CharacterState.Interacting);
        //     try
        //     {
        //         await _currentInteractable.InteractAsync(_colliderOwner);
        //     }
        //     catch (Exception ex)
        //     {
        //         Debug.LogError($"Interaction failed: {ex.Message}");
        //     }
        //     finally
        //     {
        //         _colliderOwner.SetState(CharacterState.Idle);
        //     }
        // }

        private (string, string) GetInteractionTip(IInteractable interactable)
        {
            if (interactable == null)
            {
                Debug.LogWarning("Interactable is null when getting interaction tip.", this);
                return (string.Empty, string.Empty);
            }

            try
            {
                if (_localizationProvider == null)
                    throw new NullReferenceException("Localization provider is null.");

                var note = _localizationProvider.LocalizeWord(interactable.LocalizationKey, WordTransform.Upper) ??
                           "Unknown";
                var action =
                    _localizationProvider.LocalizeWord(interactable.InteractionTipNameId, WordTransform.Upper) ??
                    "Interact";
                return (note, action);
            }
            catch (Exception ex)
            {
                Debug.LogError($"Failed to get interaction tip: {ex.Message}", this);
                return (string.Empty, string.Empty);
            }
        }

        private bool IsLayerInMask(int layer) => (triggeredByLayer.value & (1 << layer)) != 0;
    }
}
