using System;
using System.Collections.Generic;
using _StoryGame.Core.Managers.HSM.Impls;
using _StoryGame.Core.Managers.HSM.Impls.States;
using _StoryGame.Gameplay.Managers.Inerfaces;
using _StoryGame.Gameplay.UI;
using _StoryGame.Infrastructure.Logging;
using R3;
using UnityEngine;
using VContainer;
using VContainer.Unity;

namespace _StoryGame.Gameplay.Managers.Impls
{
    public sealed class UIManager : MonoBehaviour, IUIManager, IInitializable
    {
        [SerializeField] private UIViewData[] uiViews;

        private IJLog _log;
        private HSM _hsm;

        private UIViewBase currentView;

        private readonly Dictionary<GameStateType, UIViewBase> _viewsCache = new();
        private readonly CompositeDisposable _disposables = new();

        [Inject]
        private void Construct(IJLog log, HSM hsm)
        {
            _log = log;
            _hsm = hsm;
        }

        public void Initialize()
        {
            _log.Info("<color=green>UI MANAGER INITIALIZED</color>");

            foreach (var uiView in uiViews)
                _viewsCache.Add(uiView.type, uiView.view);
            _hsm.CurrentStateType.Subscribe(OnStateChange).AddTo(_disposables);
        }

        private void Start()
        {
            foreach (var uiView in _viewsCache)
                uiView.Value.HideBase();
        }

        private void OnStateChange(GameStateType state)
        {
            if (state == GameStateType.NotSet)
                return;

            _log.Info($"SHOW UI FOR: {state}");

            SwitchGlobalView(_viewsCache[state]);
        }

        private void SwitchGlobalView(UIViewBase uiViewBase)
        {
            if (currentView == uiViewBase)
                return;

            currentView?.HideBase();
            currentView = uiViewBase;
            currentView.ShowBase();
        }
    }
}
