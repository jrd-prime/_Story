using System;
using _StoryGame.Gameplay.Extensions;
using _StoryGame.Gameplay.UI;
using R3;
using UnityEngine;
using UnityEngine.UIElements;
using VContainer;

namespace _StoryGame.Infrastructure.Bootstrap
{
    [RequireComponent(typeof(UIDocument))]
    public abstract class UIView<TController> : UIViewBase where TController : IUIViewModel
    {
        [Inject] private IObjectResolver _resolver;

        protected TController ViewModel;
        protected VisualElement Root;
        protected readonly CompositeDisposable Disposables = new();
        private VisualElement Container;

        private void Awake()
        {
            ResolveDependencies();


            if (Equals(ViewModel, default(TController)))
                throw new NullReferenceException("ViewModel is null in " + name);

            var uiDocument = GetComponent<UIDocument>();
            // await uiDocument.WaitForReadyAsync();

            Root = uiDocument.rootVisualElement ??
                   throw new NullReferenceException("RootVisualElement is null on start in " + name);

            Container = Root.GetVisualElement<VisualElement>("main-container", name);


            InitElements();
            Subscribe();
        }

        public override void ShowBase()
        {
            Debug.Log("Show " + name);
            Container.style.display = DisplayStyle.Flex;
        }

        public override void HideBase()
        {
            Container.style.display = DisplayStyle.None;
        }

        private void ResolveDependencies()
        {
            if (_resolver == null)
                throw new NullReferenceException("Resolver is null in " + name);

            ViewModel = _resolver.Resolve<TController>();

            ResolveDependencies(_resolver);
        }

        protected virtual void ResolveDependencies(IObjectResolver resolver)
        {
        }

        protected abstract void InitElements();
        protected abstract void Subscribe();
    }
}
